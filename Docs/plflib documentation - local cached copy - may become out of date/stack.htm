<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html; charset=UTF-8" http-equiv="content-type">
  <meta name="description" content="PLF C++ Library - plf::stack">
  <meta name="keywords"
  content="C++, C, vector, stack, plf::stack, containers, optimize, performance, pointer, iterator, invalidation">
  <title>PLF C++ Library - plf::stack</title>
  <link rel="stylesheet" type="text/css" href="style.css">
</head>

<body>
<a href="index.htm">Home</a> 

<h1>PLF C++ Library - plf::stack</h1>

<h2>Intro</h2>

<p>plf::stack is used internally by <a href="colony.htm">plf::colony</a> but
can also be used on it's own. It is, basically, a more efficient implementation
of the STL's std::stack container, faster than all std:: containers in the
context of a stack, though depending on the compiler it may sacrifice a small
amount of pop speed for a much larger gain in push speed for small scalar
types, versus std::vector. It uses the same <a
href="size_doubling_memory_block_allocation.htm">size-doubling memory-block
allocation model</a> as plf::colony, and like plf::colony it never invalidates
references/pointers to non-popped elements, making it perfect for true
object-oriented programming with containers of interrelated data structures.</p>

<h2><a id="license"></a>License</h2>

<p>plf::stack is under a permissive <a
href="http://en.wikipedia.org/wiki/Zlib_License">zlib license</a>. This means:
Software is used on 'as-is' basis. It can be modified and used in commercial
software. Authors are not liable for any damages arising from its use. The
distribution of a modified version of the software is subject to the following
restrictions:</p>
<ul>
  <li>The authorship of the original software must not be misrepresented,</li>
  <li>Altered source versions must not be misrepresented as being the original
    software, and</li>
  <li>The license notice must not be removed from source distributions.</li>
</ul>

<h2>Download</h2>

<p>Download on the plf::colony page <a href="colony.htm#download">here</a>.<br>
Both plf::stack and plf::colony are simple .h header files, to be included with
a #include command. The package includes both plf::colony and plf::stack.</p>

<h2>Benchmarks</h2>

<p style="font-size: 75%"><i>Last updated 22-02-2016 v3.00</i></p>

<p>This benchmark compares performance between std::vector and plf::stack. I'm
using std::vector instead of std::stack, as while std::stack usually uses
std::vector internally, sometimes it doesn't depending on the implementation,
which would make the implementation slower than if it were vector internally.
So to make things simpler and a more fair comparison, I'm using std::vector
directly. The benchmarks are included in the plf_demo.cpp in the download,
anyone can run them.</p>

<p>The test setup is an E8500 on an Intel motherboard, 8GB ram. Results are
much the same on other Intel x64 platforms. Compilers are mingw TDM GCC 5.1
(both 32-bit and 64-bit versions), MS VC++2010 and MS VC++2013. I've forgone
clang as the results were much the same as GCC. Release compilation settings
only, settings for MS compilers are "/O2 /Oi /Ot /Oy /GL /GS- /GY- /arch:SSE2
/MT", for GCC they are "-O2;-march=native;-std=c++11". <a
href="http://www.libsdl.org">SDL</a> was used for more precise timing.</p>

<p>There are three tests; one with a simple small struct consisting of 2
doubles, 2 pointers and 2 integers, one with a larger struct containing several
large arrays, and one with only unsigned ints ie. a primitive type. We'll start
with the small structs. Numbers are milliseconds, lower is better.</p>

<p></p>

<h4>Small struct test</h4>

<table style="width: 100%" border="1">
  <caption>Push 5000000 small structs, each with a random number in an unsigned
  int member</caption>
  <colgroup><col>
    <col>
    <col>
    <col>
    <col>
    <col>
  </colgroup>
  <tbody>
    <tr>
      <td>Push duration in ms</td>
      <td>GCC 5.1 x86</td>
      <td>GCC 5.1 x64</td>
      <td>MSVC 2010 x86</td>
      <td>MSVC 2013 x64</td>
      <td>Average</td>
    </tr>
    <tr>
      <td>std::vector</td>
      <td>332</td>
      <td>312</td>
      <td>434</td>
      <td>497</td>
      <td></td>
    </tr>
    <tr>
      <td>plf::stack</td>
      <td>149</td>
      <td>117</td>
      <td>153</td>
      <td>140</td>
      <td></td>
    </tr>
    <tr>
      <td>stack vs vector performance</td>
      <td>2.3x</td>
      <td>2.7x</td>
      <td>2.8x</td>
      <td>3.6x</td>
      <td>2.9x</td>
    </tr>
  </tbody>
</table>

<table style="width: 100%" border="1">
  <caption>Read and pop all elements</caption>
  <colgroup><col>
    <col>
    <col>
    <col>
    <col>
    <col>
  </colgroup>
  <tbody>
    <tr>
      <td>Top + Pop duration in ms</td>
      <td>GCC 5.1 x86</td>
      <td>GCC 5.1 x64</td>
      <td>MSVC 2010 x86</td>
      <td>MSVC 2013 x64</td>
      <td>Average</td>
    </tr>
    <tr>
      <td>std::vector</td>
      <td>45</td>
      <td>39</td>
      <td>30</td>
      <td>43</td>
      <td></td>
    </tr>
    <tr>
      <td>plf::stack</td>
      <td>48</td>
      <td>36</td>
      <td>30</td>
      <td>46</td>
      <td></td>
    </tr>
    <tr>
      <td>stack vs vector performance</td>
      <td>0.94x</td>
      <td>1.08x</td>
      <td>1.0x</td>
      <td>0.94x</td>
      <td>0.99x</td>
    </tr>
  </tbody>
</table>

<p></p>

<p></p>

<h4>Large struct test</h4>

<table style="width: 100%" border="1">
  <caption>Push 10000 large structs, each with a random number in an unsigned
  int member</caption>
  <colgroup><col>
    <col>
    <col>
    <col>
    <col>
    <col>
  </colgroup>
  <tbody>
    <tr>
      <td>Push duration in ms</td>
      <td>GCC 5.1 x86</td>
      <td>GCC 5.1 x64</td>
      <td>MSVC 2010 x86</td>
      <td>MSVC 2013 x64</td>
      <td>Average</td>
    </tr>
    <tr>
      <td>std::vector</td>
      <td>311</td>
      <td>269</td>
      <td>444</td>
      <td>465</td>
      <td></td>
    </tr>
    <tr>
      <td>plf::stack</td>
      <td>96</td>
      <td>103</td>
      <td>100</td>
      <td>104</td>
      <td></td>
    </tr>
    <tr>
      <td>stack vs vector performance</td>
      <td>3.2x</td>
      <td>2.6x</td>
      <td>4.5x</td>
      <td>4.5x</td>
      <td>3.8x</td>
    </tr>
  </tbody>
</table>

<table style="width: 100%" border="1">
  <caption>Read and pop all elements</caption>
  <colgroup><col>
    <col>
    <col>
    <col>
    <col>
    <col>
  </colgroup>
  <tbody>
    <tr>
      <td>Top + pop duration in ms</td>
      <td>GCC 5.1 x86</td>
      <td>GCC 5.1 x64</td>
      <td>MSVC 2010 x86</td>
      <td>MSVC 2013 x64</td>
      <td>Average</td>
    </tr>
    <tr>
      <td>std::vector</td>
      <td>35</td>
      <td>34</td>
      <td>34</td>
      <td>37</td>
      <td></td>
    </tr>
    <tr>
      <td>plf::stack</td>
      <td>34</td>
      <td>33</td>
      <td>33</td>
      <td>36</td>
      <td></td>
    </tr>
    <tr>
      <td>stack vs vector performance</td>
      <td>1.03x</td>
      <td>1.03x</td>
      <td>1.03x</td>
      <td>1.03x</td>
      <td>1.03x</td>
    </tr>
  </tbody>
</table>

<p></p>

<h4>Small primitive type test</h4>

<table style="width: 100%" border="1">
  <caption>Push 10000000 random unsigned ints</caption>
  <colgroup><col>
    <col>
    <col>
    <col>
    <col>
    <col>
  </colgroup>
  <tbody>
    <tr>
      <td>Push duration in ms</td>
      <td>GCC 5.1 x86</td>
      <td>GCC 5.1 x64</td>
      <td>MSVC 2010 x86</td>
      <td>MSVC 2013 x64</td>
      <td>Average</td>
    </tr>
    <tr>
      <td>std::vector</td>
      <td>179</td>
      <td>177</td>
      <td>286</td>
      <td>229</td>
      <td></td>
    </tr>
    <tr>
      <td>plf::stack</td>
      <td>138</td>
      <td>117</td>
      <td>220</td>
      <td>161</td>
      <td></td>
    </tr>
    <tr>
      <td>stack vs vector performance</td>
      <td>1.3x</td>
      <td>1.5x</td>
      <td>1.3x</td>
      <td>1.4x</td>
      <td>1.4x</td>
    </tr>
  </tbody>
</table>

<table style="width: 100%" border="1">
  <caption>Read and pop all elements</caption>
  <colgroup><col>
    <col>
    <col>
    <col>
    <col>
    <col>
  </colgroup>
  <tbody>
    <tr>
      <td>Top + pop duration in ms</td>
      <td>GCC 5.1 x86</td>
      <td>GCC 5.1 x64</td>
      <td>MSVC 2010 x86</td>
      <td>MSVC 2013 x64</td>
      <td>Average</td>
    </tr>
    <tr>
      <td>std::vector</td>
      <td>24</td>
      <td>9</td>
      <td>17</td>
      <td>29</td>
      <td></td>
    </tr>
    <tr>
      <td>plf::stack</td>
      <td>24</td>
      <td>13</td>
      <td>17</td>
      <td>37</td>
      <td></td>
    </tr>
    <tr>
      <td>stack vs vector performance</td>
      <td>1.00x</td>
      <td>0.69x</td>
      <td>1.00x</td>
      <td>0.78x</td>
      <td>0.87x</td>
    </tr>
  </tbody>
</table>

<h2>Function Descriptions and syntax</h2>

<h3>Constructors</h3>
<ul>
  <li><code>stack&lt;the_type&gt; a_stack</code> 
    <p>Default constructor - initial group size is 8.<br>
    Example: <code style="color: brown">plf::stack&lt;int&gt; int_stack;</code>
    </p>
  </li>
  <li><code>stack&lt;the_type, custom_allocator&lt;the_type&gt; &gt;
    a_stack</code> 
    <p>Default constructor, but using a custom allocator eg. something other
    than std::allocator. Custom allocators can also be used with all the
    definitions below, of course. <br>
    Example: <code style="color: brown">plf::stack&lt;int,
    tbb::allocator&lt;int&gt; &gt; int_stack;</code> </p>
  </li>
  <li><code>stack&lt;the_type&gt; a_stack(const size_type
    initial_group_size)</code> 
    <p>Directed constructor - this sets the initial group size - for example,
    to 50 (unlike a vector, these 50 elements are not constructed, only the
    memory is allocated and the initial group-size set at 50 instead of 8) -
    which may yield a minor performance advantage if you know roughly how many
    elements are going to be stored in your stack in advance. Minimum group
    size is 3.<br>
    Example: <code style="color: brown">plf::stack&lt;int&gt;
    int_stack(62);</code></p>
  </li>
  <li><code>stack&lt;the_type&gt; a_stack(const size_type initial_group_size,
    const size_type max_group_size)</code> 
    <p>Directed constructor - this sets the initial first group size like the
    above, and the maximum group size - this can be useful if you want to limit
    memory usage. Minimum initial group size is 3.<br>
    Example: <code style="color: brown">plf::stack&lt;int&gt; int_stack(64,
    512);</code></p>
  </li>
  <li><code>stack&lt;the_type&gt; a_stack(const stack &amp;
    another_stack)</code> 
    <p>Copy constructor - copies all contents from another_stack. Initial group
    size is the total size of another_stack. <br>
    Example: <code style="color: brown">plf::stack&lt;int&gt;
    int_stack_2(int_stack_1);</code></p>
  </li>
  <li><code>stack&lt;the_type&gt; a_stack(stack &amp;&amp; another_stack)
    <b>C++11 only</b></code> 
    <p>Move constructor - moves all contents from another_stack, does not alter
    any group sizes. Another_stack is now void of contents, can be safely
    destructed. <br>
    Example: <code style="color: brown">plf::stack&lt;int&gt;
    int_stack_2(std::move(int_stack_1));</code></p>
  </li>
</ul>

<h3>Other functions</h3>
<ul>
  <li><code>void push(const the_type &amp;element)</code> 
    <p>Push an element to the stack.<br>
    Example: <code style="color: brown">object_stack.push(object1);</code></p>
  </li>
  <li><code>void push(the_type &amp;&amp;element) <b>C++11 only</b></code> 
    <p>Move an element to the stack.<br>
    Example: <code
    style="color: brown">object_stack.push(std::move(object1));</code></p>
  </li>
  <li><code>void emplace(Arguments ...parameters) <b>C++11 only</b></code> 
    <p>Constructs an element directly on the stack using the the constructor
    arguments specified.<br>
    Example: <code style="color: brown">object_stack.emplace(10, 200,
    "a");</code></p>
  </li>
  <li><code>void pop()</code> 
    <p>Pop the last push()'d element off the stack.<br>
    Example: <code style="color: brown">object_stack.pop();</code></p>
  </li>
  <li><code>the_type &amp; top()</code> 
    <p>Return a reference to the last push()'d element on the stack.<br>
    Example: <code style="color: brown">object2 = object_stack.top();</code></p>
  </li>
  <li><code>size_type size()</code> 
    <p>Return the current number of elements stored on the stack.<br>
    Example: <code style="color: brown">unsigned int j =
    static_cast&lt;unsigned int&gt;(object_stack.size());</code></p>
  </li>
  <li><code>bool empty()</code> 
    <p>Returns a boolean indicating whether the stack is currently empty of
    elements.<br>
    Example: <code style="color: brown">if (object_stack.empty())
    return;</code></p>
  </li>
  <li><code>void clear()</code> 
    <p>Empties the stack and removes all elements. Deallocates all groups and
    creates a new starting group of the same size as the original starting
    group (8, unless specified otherwise by the constructor or reinitialize
    call).<br>
    Example: <code style="color: brown">object_stack.clear();</code></p>
  </li>
  <li><code>void reinitialize(const size_type new_size)</code> 
    <p>Clears the stack, creates a new starting group of the size specified.<br>
    Example: <code
    style="color: brown">object_stack.reinitialize(1000);</code></p>
  </li>
  <li><code>void reinitialize(const size_type new_size, const size_type
    maximum_size)</code> 
    <p>Clears the stack, creates a new starting group of the size specified,
    with the maximum potential group size set to maximum_size.<br>
    Example: <code style="color: brown">object_stack.reinitialize(1000,
    100000);</code></p>
  </li>
  <li><code>stack &amp; operator = (const stack &amp;source)</code> 
    <p>Copy the elements from another stack to this stack, clearing this stack
    of existing elements first.<br>
    Example: <code style="color: brown">object_stack = object_stack2;</code></p>
  </li>
  <li><code>stack &amp; operator = (const stack &amp;&amp;source) <b>C++11
    only</b></code> 
    <p>Move the elements from another stack to this stack, clearing this stack
    of existing elements first. Source stack becomes invalid but can be safely
    destructed without undefined behaviour.<br>
    Example: <code style="color: brown">object_stack =
    std::move(object_stack2);</code></p>
  </li>
  <li><code>bool operator == (const stack &amp;source)</code> 
    <p>Compare contents of another stack to this stack. Returns a boolean as to
    whether they are equal.<br>
    Example: <code style="color: brown">if (object_stack == object_stack2)
    return;</code></p>
  </li>
  <li><code>bool operator != (const stack &amp;source)</code> 
    <p>Compare contents of another stack to this stack. Returns a boolean as to
    whether they are not equal.<br>
    Example: <code style="color: brown">if (object_stack != object_stack2)
    return;</code></p>
  </li>
</ul>
<br>


<p>Contact: <img src="footer.gif"><br>
plf:: library and this site Copyright (c) 2015, Matthew Bentley</p>
</body>
</html>
